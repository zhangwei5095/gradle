/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def buckets = [
    "1": [
        ":platformPlay"
    ],

    "2": [
        ":toolingApi",
        ":compositeBuilds",
        ":resourcesS3",
        ":jetty",
        ":resources",
        ":jvmServices",
        ":docs",
        ":distributions",
        ":soak",
        ":smokeTest",
        ":taskCacheHttp"
    ],

    "3": [
        ":launcher",
        ":buildComparison",
        ":buildInit",
        ":antlr",
        ":signing",
        ":testingBase",
        ":baseServicesGroovy",
        ":toolingApiBuilders"
    ],

    "4": [
        ":testKit",
        ":languageNative",
        ":ui",
        ":ivy",
        ":wrapper",
        ":platformJvm",
        ":baseServices",
        ":announce",
        ":publish"
    ],

    "5": [
        ":integTest",
        ":plugins",
        ":idePlay",
        ":platformBase",
        ":diagnostics",
        ":ideNative",
        ":javascript",
        ":languageJvm",
        ":ear"
    ],

    "6": [
        ":pluginUse",
        ":dependencyManagement",
        ":languageJava",
        ":maven",
        ":reporting",
        ":languageGroovy",
        ":internalTesting",
        ":performance",
        ":buildScanPerformance",
        ":internalIntegTesting",
        ":internalPerformanceTesting",
	":internalAndroidPerformanceTesting",
        ":processServices",
        ":installationBeacon",
    ],

    "7": [
        ":core",
        ":languageScala",
        ":scala",
        ":platformNative",
        ":modelCore",
        ":resourcesSftp",
        ":messaging",
        ":logging",
        ":resourcesHttp",
        ":openApi"
    ],

    "8": [
        ":pluginDevelopment",
        ":codeQuality",
        ":testingJvm",
        ":ide",
        ":testingNative",
        ":jacoco",
        ":modelGroovy",
        ":osgi",
        ":native",
        ":cli"
    ]
]

//Make sure all projects are accounted for
def coveredProjects = (buckets.collect { it.value }).flatten()
def uncoveredProjects = subprojects.collect { ":${it.name}" } - coveredProjects
assert uncoveredProjects == [] : "The following projects should be added to a bucket: ${uncoveredProjects}"

ext.runtimeProjectPaths = runtimeProjects.collect { it.path }

//Make sure there are no duplicates between buckets
for (int bucket : buckets.keySet().collect{it as int}) {
    for (int other=bucket+1; other<=buckets.size(); other++) {
        def duplicates = buckets["${bucket}"].intersect(buckets["${other}"])
        assert duplicates == [] : "Duplicates were found between bucket ${bucket} and ${other}: ${duplicates}"
    }
}

//Create appropriate build types for each bucket
buildTypes.toArray().each { buildType ->
    buckets.each { String bucketName, List<String> projects ->
        def projectTasks = tasksForProjects(buildType, projects)
        buildTypes.create("${buildType.name + bucketName}") {
            tasks projectTasks as String[]
            projectProperties buildType.projectProperties
        }
    }
}

def tasksForProjects(buildType, List<String> projects) {
    List tasks = []
    projects.each { String p ->
        buildType.tasks.each { String t ->
            String task = resolveTask(p, t)
            if (task) {
                if (!task.contains(':')) {
                    tasks << "$p:${task}"
                } else {
                    // Add the task if the project is in this bucket
                    if (task.startsWith("${p}:") || ":${task}".startsWith("${p}:")) {
                        tasks << task
                    }
                }
            }
        }
    }
    return tasks
}

def String resolveTask(String projectPath, String task) {
    if (testGroupings.containsKey(task)) {
        if (projectPath in runtimeProjectPaths) {
            return testGroupings[task]
        } else {
            return null
        }
    } else {
        return task
    }
}
