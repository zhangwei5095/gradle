/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.gradle.testing.DistributedPerformanceTest
import org.gradle.testing.PerformanceTest
import org.gradle.testing.performance.generator.tasks.JvmProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.ProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.RemoteProject

apply plugin: 'java'

sourceSets {
    performanceTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    performanceTestCompile.extendsFrom testCompile
    performanceTestRuntime.extendsFrom testRuntime
    junit
}

dependencies {
    performanceTestCompile project(":internalPerformanceTesting")

    //so that implicit help tasks are available:
    performanceTestRuntime project(':diagnostics')

    //So that the wrapper and init task are added when performanceTests are run via commandline
    //above can be removed when we implement the auto-apply plugins
    performanceTestRuntime project(':buildInit')

    junit 'junit:junit:4.12'
}

task checkNoIdenticalBuildFiles {
    doLast {
        def files = [:].withDefault { [] }
        buildDir.eachFileRecurse {
            if (it.name.endsWith('.gradle')) {
                def hash = HashUtil.createHash(it, 'sha1').asHexString()
                files[hash] << it
            }
        }
        files.each { hash, candidates ->
            if (candidates.size()>1) {
                println "Duplicate build files found for hash '$hash' : $candidates"
            }
        }
    }
}

tasks.withType(ProjectGeneratorTask) {
    group = 'Project setup'
    if(project.hasProperty("maxProjects")) {
        projects = maxProjects as Integer
    }
}

tasks.withType(JvmProjectGeneratorTask) {
    testDependencies = configurations.junit
}

task prepareSamples {
    dependsOn tasks.withType(ProjectGeneratorTask)
    group = "Project Setup"
    description = "Generates all sample projects for automated performance tests"
}

task cleanSamples(type: Delete) {
    delete {tasks.withType(ProjectGeneratorTask)*.destDir}
    delete {tasks.withType(RemoteProject)*.outputDirectory}
}

def withPerformanceDb = { task ->
    def urlProperty = "org.gradle.performance.db.url"
    def url = project.findProperty(urlProperty)
    if (url) {
        task.systemProperty urlProperty, url
    }
    def usernameProperty = "org.gradle.performance.db.username"
    def username = project.findProperty(usernameProperty)
    if (username) {
        task.systemProperty usernameProperty, username
    }
    def passwordProperty = "org.gradle.performance.db.password"
    def password = project.findProperty(passwordProperty)
    if (password) {
        task.systemProperty passwordProperty, password
    }
}

ext.performanceReportTasks = tasks.withType(PerformanceReport)
performanceReportTasks.all(withPerformanceDb)

task performanceReport(type: PerformanceReport) {
    classpath = sourceSets.performanceTest.runtimeClasspath
    resultStoreClass = "org.gradle.performance.results.AllResultsStore"
    reportDir = new File(buildDir, "performance-tests/report")
    outputs.upToDateWhen { false }
}

ext.performanceTestTasks = tasks.withType(PerformanceTest)

performanceTestTasks.all { PerformanceTest task ->
    withPerformanceDb(task)
    testClassesDir = sourceSets.performanceTest.output.classesDir
    classpath = sourceSets.performanceTest.runtimeClasspath
    dependsOn( prepareSamples, { rootProject.getTasksByName('publishLocalArchives', true) }, ':distributions:binZip')
    finalizedBy performanceReport

    project.task("clean${task.name.capitalize()}", type: Delete) {
        delete task.outputs
        dependsOn cleanPerformanceReport
    }

    if (project.findProperty('org.gradle.performance.baselines')) {
        systemProperty 'org.gradle.performance.baselines', project.getProperty('org.gradle.performance.baselines')
    }

    maxParallelForks = 1
    checks = 'speed'


    doFirst {
        // Some performance builds generate a lot of output,
        // that is buffered until the test finishes via GradleExecuter.
        if (System.getProperty('sun.arch.data.model').contains("64")) {
            jvmArgs '-Xmx4g'
        } else {
            println "not increasing JVM heap size due to use of 32bit JVM"
        }
        if (task.channel) {
            performanceReport.systemProperty 'org.gradle.performance.execution.channel', task.channel
        }
    }
}

task performanceTest(type: PerformanceTest) {
    options {
        excludeCategories 'org.gradle.performance.categories.Experiment'
    }
}

task performanceExperiment(type: PerformanceTest) {
    options {
        includeCategories 'org.gradle.performance.categories.Experiment'
    }
}

task fullPerformanceTest(type: PerformanceTest) {
}

task performanceAdhocTest(type: PerformanceTest) {
    systemProperty "org.gradle.performance.db.url", "jdbc:h2:./build/database"
    channel = "adhoc"
}

tasks.withType(DistributedPerformanceTest) {
    scenarioList = file("$buildDir/performance-tests/scenario-list.csv")
    scenarioReport = file("$buildDir/performance-tests/scenario-report.html")
    buildTypeId = project.findProperty("org.gradle.performance.buildTypeId")
    workerTestTaskName = project.findProperty("org.gradle.performance.workerTestTaskName")?:'fullPerformanceTest'
    coordinatorBuildId = project.findProperty("org.gradle.performance.coordinatorBuildId")
    teamCityUrl = "https://builds.gradle.org/"
    teamCityUsername = project.findProperty("teamCityUsername")
    teamCityPassword = project.findProperty("teamCityPassword")
}

task distributedPerformanceTest(type: DistributedPerformanceTest) {
    options {
        excludeCategories 'org.gradle.performance.categories.Experiment'
    }
}

task distributedPerformanceExperiment(type: DistributedPerformanceTest) {
    options {
        includeCategories 'org.gradle.performance.categories.Experiment'
    }
}

task distributedFullPerformanceTest(type: DistributedPerformanceTest) {
    baselines = ['1.1', '1.12', '2.0', '2.1', '2.4', '2.9', '2.12', '2.14.1', 'last']
    checks = 'none'
    channel = 'historical'
}

configure([performanceTest, performanceExperiment, fullPerformanceTest, performanceAdhocTest]) {
    if (project.hasProperty('org.gradle.performance.use_yourkit')) {
        testLogging.showStandardStreams = true
        systemProperties['org.gradle.performance.use_yourkit'] = '1'
        outputs.upToDateWhen { false }
    }
    if (project.hasProperty('org.gradle.performance.heapdump')) {
        systemProperties['org.gradle.performance.heapdump'] = project.property('org.gradle.performance.heapdump')?:'1'
    }
    if (project.hasProperty('org.gradle.performance.hotspotlog')) {
        systemProperties['org.gradle.performance.hotspotlog'] = '1'
    }
    if (project.hasProperty('org.gradle.performance.honestprofiler')) {
        systemProperties['org.gradle.performance.honestprofiler'] = '1'
    }
    if (project.hasProperty('performanceTest.verbose')) {
        testLogging.showStandardStreams = true
    }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) {
    eclipse {
        classpath {
            plusConfigurations.add(configurations.performanceTestCompile)
            plusConfigurations.add(configurations.performanceTestRuntime)
        }
    }
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) {
    idea {
        module {
            testSourceDirs += sourceSets.performanceTest.groovy.srcDirs
            testSourceDirs += sourceSets.performanceTest.resources.srcDirs
            scopes.TEST.plus.add(configurations.performanceTestCompile)
            scopes.TEST.plus.add(configurations.performanceTestRuntime)
        }
    }
}

class PerformanceReport extends JavaExec {
    @Input
    String resultStoreClass
    @OutputDirectory
    File reportDir

    @TaskAction
    public void exec() {
        main = "org.gradle.performance.results.ReportGenerator"
        args = [resultStoreClass, reportDir.path]
        super.exec();
    }
}

tasks.withType(ProjectGeneratorTask) {
    sharedTemplateDirectory = project.findProject(':internalPerformanceTesting').file('src/templates')
    dependsOn ':internalPerformanceTesting:measurementPluginJar'
    doFirst {
        templateArgs.measurementPluginJarFile = project.tasks.findByPath(':internalPerformanceTesting:measurementPluginJar')?.archivePath
    }
}

tasks.withType(RemoteProject).all {
    dependsOn ':internalPerformanceTesting:measurementPluginJar'
}

// add task that zips the junit xml test report files to a zip file
// this file can be used to combine the test reports of the distributed test runs into a single report in the coordinator
tasks.withType(PerformanceTest) { task ->
    if(!(task instanceof DistributedPerformanceTest)) {
        def junitXmlDir = task.reports.junitXml.destination
        def testResultsZipTask = tasks.create(name: "${task.name}ResultsZip", type: org.gradle.api.tasks.bundling.Zip) {
            from(junitXmlDir) {
                include '**/TEST-*.xml'
                includeEmptyDirs = false
                eachFile { copyDetails ->
                    try {
                        def testsuite = new groovy.util.XmlSlurper().parse(copyDetails.file)
                        // skip files where all tests were skipped
                        if (testsuite.@tests.text() == testsuite.@skipped.text()) {
                            copyDetails.exclude()
                        }
                    } catch (e) {
                        copyDetails.exclude()
                    }
                }
            }
            from(task.debugArtifactsDirectory)
            destinationDir = buildDir
            archiveName = "test-results-${junitXmlDir.name}.zip"
        }
        task.finalizedBy testResultsZipTask

        def cleanTestResultsZipTask = tasks.create(name: "clean${testResultsZipTask.name.capitalize()}", type: Delete) {
            delete testResultsZipTask.archivePath
        }
        tasks.getByName("clean${task.name.capitalize()}").dependsOn cleanTestResultsZipTask
    }
}
