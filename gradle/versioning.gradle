if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Invocation tasks: $gradle.startParameter.taskNames\nInvocation properties: $gradle.startParameter.projectProperties"
}

ext.milestoneNumber = project.hasProperty("milestoneNumber") ? project.milestoneNumber.toInteger() : null
ext.rcNumber = project.hasProperty("rcNumber") ? project.rcNumber.toInteger() : null
ext.finalRelease = project.hasProperty("finalRelease")
boolean timestampedVersion
if (project.hasProperty("timestampedVersion")) {
    def value = project.property("timestampedVersion")
    timestampedVersion = value != "false"
} else {
    timestampedVersion = gradle.startParameter.taskNames.contains("install") || gradle.startParameter.taskNames.contains("installAll")
}
if ((milestoneNumber != null && rcNumber != null) ||
        (rcNumber != null && finalRelease) ||
        (milestoneNumber != null && finalRelease)) {
    throw new InvalidUserDataException("Cannot set any combination of milestoneNumber, rcNumber and finalRelease at the same time")
}


if (incomingDistributionsBuildReceipt) {
    ext.versionBase = incomingDistributionsBuildReceipt.versionBase
    ext.buildTimestamp = incomingDistributionsBuildReceipt.buildTimestamp
    ext.devBuild = false
} else {
    ext.devBuild = milestoneNumber == null && rcNumber == null && !finalRelease && !timestampedVersion;
    ext.versionBase = rootProject.file("version.txt").text.trim()

    if (devBuild) {
        ext.buildTimestamp = "unknown";
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmssZ')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        Date buildTime
        if (project.hasProperty("buildTimestamp")) {
            buildTime = timestampFormat.parse(buildTimestamp)
        } else {
            File timestampFile = file("$buildDir/timestamp.txt")
            if (timestampFile.isFile()) {
                boolean uptodate = true
                def modified = timestampFile.lastModified()
                project(':core').fileTree('src/main').visit {fte ->
                    if (fte.file.isFile() && fte.lastModified > modified) {
                        uptodate = false
                        fte.stopVisiting()
                    }
                }
                if (!uptodate) {
                    timestampFile.setLastModified(new Date().time)
                }
            } else {
                timestampFile.parentFile.mkdirs()
                timestampFile.createNewFile()
            }

            buildTime = new Date(timestampFile.lastModified())
        }
        ext.buildTimestamp = timestampFormat.format(buildTime)
    }
}

version = versionBase

ext.isSnapshot = false
if (finalRelease) {
    // use version base
} else if (rcNumber != null) {
    version += "-rc-$rcNumber"
} else if (milestoneNumber != null) {
    version += "-milestone-$milestoneNumber"
} else if (timestampedVersion) {
    isSnapshot = true
    version += "-$buildTimestamp"
} else {
    isSnapshot = true
    version += "-snapshot-1"
}

if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Version: $version (version base: $versionBase, timestamp: $buildTimestamp, snapshot: $isSnapshot, dev build: $devBuild)"
}
