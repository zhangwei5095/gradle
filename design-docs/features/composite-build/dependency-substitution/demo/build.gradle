import org.gradle.tooling.GradleConnector
import org.gradle.tooling.model.GradleProject
import org.gradle.tooling.model.eclipse.EclipseProject


def createComposite() {
    def builder = GradleConnector.newGradleConnection()
    builder.useInstallation(gradle.gradleHomeDir)
    compositeRootDirs().each {
        println "Adding project $it.absolutePath to composite"
        builder.addParticipant(it).useInstallation(gradle.gradleHomeDir)
    }

    // builder.integratedComposite(true)
    builder.build()
}

task executeTasks {
    doLast {
        def targetBuildDir = compositeRootDirs().find { it.toString().endsWith(project.targetBuild) }
        def targetTasks = project.targetTasks
        println "Running tasks '$targetTasks' in $targetBuild"

        def connection = createComposite()

        def buildLauncher = connection.newBuild()
        buildLauncher.forTasks(targetBuildDir, targetTasks.split(','))
        buildLauncher.standardOutput = System.out
        buildLauncher.standardError = System.err
        println "-------------"
        buildLauncher.run()
        println "-------------\n\n"
        connection.close()
    }
}

task printModel {
    doLast {
        def connection = createComposite()

        def eclipseProjects = connection.getModels(EclipseProject).collect { it.model }
        def rootProjects = eclipseProjects.grep({ findRootProject(it) == it }).sort({ it.projectDirectory })
        rootProjects.each { rootProject ->
            renderEclipseProject("", rootProject)
        }

        def gradleProjects = connection.getModels(GradleProject).collect { it.model }
        gradleProjects.each { gradleProject ->
            println "GradleProject: " + gradleProject.path
        }

        def publicationResults = connection.getModels(org.gradle.tooling.model.gradle.ProjectPublications).collect { it.model }
        publicationResults.each { publicationResult ->
            println "Pubs: " + publicationResult.projectIdentifier + " :: " + publicationResult.publications*.id
        }

        def buildEnvironments = connection.getModels(org.gradle.tooling.model.build.BuildEnvironment).collect { it.model }
        buildEnvironments.each { env ->
            println "Env: gradleVersion=${env.gradle.gradleVersion}, javaHome=${env.java.javaHome}"
        }
    }
}

def compositeRootDirs() {
    file("demo.composite").readLines().collect { new File(it) }
}

def findRootProject(project) {
    if (project.parent) {
        return findRootProject(project.parent)
    }
    return project
}

def renderEclipseProject(indent, eclipseProject) {
    renderEclipseProjectSummary(indent, eclipseProject)
    renderEclipseProjectDependencies(indent, eclipseProject)
    eclipseProject.children.each { child ->
        renderEclipseProject(indent + " ", child)
    }
}

def renderEclipseProjectSummary(indent, eclipseProject) {
    def rootProject = findRootProject(eclipseProject)
    def gradleProject = eclipseProject.gradleProject
    def participantDir = rootProject.gradleProject.projectDirectory.absolutePath - file("projects").absolutePath - "/"
    println "${indent}${participantDir}:${gradleProject.path} (${gradleProject.name})"
}

def renderEclipseProjectDependencies(indent, project) {
    project.classpath.each { externalDependency ->
        def module = externalDependency.gradleModuleVersion
        if (module!=null) {
            renderDependency(indent, "module ${module.group}:${module.name}:${module.version}")
        } else {
            renderDependency(indent, "file " + externalDependency.file)
        }
    }
    project.projectDependencies.each { projectDependency ->
        renderDependency(indent, "project " + projectDependency.path)
    }
}

def renderDependency(indent, dependency) {
    println "${indent}> depends on ${dependency}"
}

defaultTasks = [ "printModel" ]
