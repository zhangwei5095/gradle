apply plugin: "groovy"

sourceCompatibility = 1.6

configurations {
    mvn3Input
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile project(":core")
    compile project(":resources")
    compile libraries.commons_lang
    compile libraries.commons_io
    compile libraries.ivy
    compile libraries.slf4j_api
    compile libraries.gson

    runtime libraries.xbean //maven3 classes dependency
    runtime libraries.bouncycastle_provider
    runtime project(":installationBeacon")

    compile libraries.maven3

    testCompile libraries.groovy

    integTestRuntime project(":ivy")
    integTestRuntime project(":maven")
    integTestRuntime project(":resourcesHttp")
    integTestRuntime project(":resourcesS3")
    integTestRuntime project(":resourcesSftp")
    //this dependency is necessary to run IvySFtpResolverIntegrationTest on ibm jdk
    //integTestRuntime "org.bouncycastle:bcprov-jdk15:1.46@jar"

    testFixturesCompile project(":internalIntegTesting")
}

useTestFixtures()
useTestFixtures(project: ":messaging")

verifyTestFilesCleanup.errorWhenNotEmpty = false

ext.runtimeShadedPath = "$buildDir/generated-resources/main/org/gradle/api/internal/runtimeshaded"

task generateGradleApiPackageList(type: org.gradle.api.internal.runtimeshaded.PackageListGenerator) {
    outputFile = file("$runtimeShadedPath/api-relocated.txt")
    // todo: find away to workaround the circular dependency in a cleaner way
    classpath = files([])
    doFirst {
        classpath = files(
            rootProject.configurations.externalModules,
            [':core', ':dependencyManagement', ':pluginUse', ":toolingApi"].collect() {
                project(it).configurations.runtime
            }, project(':').configurations.gradlePlugins)
    }
}

task generateTestKitPackageList(type: org.gradle.api.internal.runtimeshaded.PackageListGenerator) {
    outputFile = file("$runtimeShadedPath/test-kit-relocated.txt")
    // todo: find away to workaround the circular dependency in a cleaner way
    classpath = files([])
    doFirst {
        classpath = project(':testKit').configurations.compile
    }
}

jar.dependsOn(generateGradleApiPackageList, generateTestKitPackageList)

