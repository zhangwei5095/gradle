/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'javascript-base'

configurations {
    reports
}

repositories {
    javaScript.googleApis()
}

dependencies {
    reports "jquery:jquery.min:1.11.0@js"
    reports "flot:flot:0.8.1:min@js"

    compile libraries.groovy
    compile project(':baseServices')
    compile libraries.slf4j_api
    compile project(':internalIntegTesting')
    compile 'com.googlecode.jatl:jatl:0.2.2'
    compile 'org.eclipse.jgit:org.eclipse.jgit:3.0.0.201306101825-r'

    runtime 'com.h2database:h2:1.4.192'
}

task reportResources(type: Copy) {
    from configurations.reports
    into "$generatedResourcesDir/org/gradle/reporting"
}

sourceSets.main.output.dir generatedResourcesDir, builtBy: reportResources

useTestFixtures(sourceSet: 'main')
useTestFixtures(project: ':toolingApi', sourceSet: 'main')
useClassycle()

apply from: "$rootDir/gradle/ideaTestSourcesWorkaround.gradle"

apply plugin: 'groovy'

sourceSets {
    measurementPlugin
}

dependencies {
    measurementPluginCompile project(":core"), project(":dependencyManagement"), project(":pluginUse"), project(":toolingApi") // mimic gradleApi()
}

compileMeasurementPluginJava {
    try {
        // check if performance counters is supported on the JVM
        Class.forName('sun.management.counter.perf.PerfInstrumentation')
    } catch (Exception e) {
        // ignore exception, just exclude PerformanceCounterDumper class from compilation in this case
        exclude('org/gradle/performance/plugin/PerformanceCounterDumper.java')
    }
}

task measurementPluginJar(type: org.gradle.jvm.tasks.Jar) {
    from sourceSets.measurementPlugin.output
    dependsOn measurementPluginClasses
    archiveName = 'measurement-plugin.jar'
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) {
    idea {
        module {
            sourceDirs += sourceSets.measurementPlugin.allSource.srcDirs
            scopes.COMPILE.plus.add(configurations.measurementPluginCompile)
        }
    }
}
