/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/taskProperties.gradle"

sourceCompatibility = javaVersion.java9Compatible ? 1.6 : 1.5

configurations {
    reports
}

classpathManifest {
    optionalProjects = ['gradle-script-kotlin']
}

dependencies {
    compile libraries.groovy

    publishCompile libraries.slf4j_api
    publishCompile project(":baseServices")
    publishCompile project(":baseServicesGroovy"), {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    publishCompile project(":messaging")
    publishCompile project(":logging")
    publishCompile project(":resources")

    compile project(":processServices")
    compile project(":jvmServices")
    compile project(":modelCore")
    compile project(":modelGroovy")
    compile libraries.asm
    compile libraries.ant
    compile libraries.commons_collections
    compile libraries.commons_io
    compile libraries.commons_lang
    compile libraries.guava
    compile libraries.jcip
    compile libraries.inject

    compile project(":cli")
    compile project(":native")

    runtime project(":docs")

    testCompile libraries.jsoup

    testRuntime libraries.xerces
    testRuntime project(":diagnostics")

    testFixturesCompile project(":internalTesting")
    testFixturesCompile libraries.ivy

    testFixturesRuntime project(':dependencyManagement')
    testFixturesRuntime project(':pluginUse')

    integTestCompile project(":internalIntegTesting")

    integTestRuntime project(":plugins")
}

useTestFixtures()
useTestFixtures(project: ":messaging")
useTestFixtures(project: ":modelCore")
useTestFixtures(project: ":logging")

test {
    forkEvery = 200
}

[compileGroovy, compileTestGroovy]*.groovyOptions*.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')

task buildReceiptResource(type: Copy, dependsOn: rootProject.createBuildReceipt) {
    into "$generatedResourcesDir/org/gradle"
    from rootProject.createBuildReceipt.receiptFile
}

sourceSets.main.output.dir generatedResourcesDir, builtBy: buildReceiptResource

task pluginsManifest(type: PluginsManifest)
sourceSets.main.output.dir generatedResourcesDir, builtBy: pluginsManifest

class PluginsManifest extends DefaultTask {
    @OutputFile
    File getPropertiesFile() {
        return new File(project.generatedResourcesDir, "gradle-plugins.properties")
    }

    @Input
    Properties getPluginProperties() {
        def properties = new Properties()
        properties.plugins = project.pluginProjects.collect { it.archivesBaseName }.sort().join(',')
        return properties
    }

    @TaskAction
    def generate() {
        org.gradle.build.ReproduciblePropertiesWriter.store(pluginProperties, propertiesFile)
    }
}

verifyTestFilesCleanup.errorWhenNotEmpty = false

