/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.testing.performance.generator.DependencyGenerator
import org.gradle.testing.performance.generator.tasks.JvmProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.MonolithicNativeProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.NativeProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.RemoteProject

task small(type: JvmProjectGeneratorTask, description: 'Generates a small project') {
}

task largeSrc(type: JvmProjectGeneratorTask, description: 'Generates a single project with lots of source files') {
    sourceFiles = 50000
    linesOfCodePerSourceFile = 20
//    subProjectTemplates << 'plain-ant-compile'
}

task multi(type: JvmProjectGeneratorTask, description: 'Generates a multi-project build') {
    projects = 25
    sourceFiles = 100
}

task mixedSize(type: JvmProjectGeneratorTask) {
    projects = 400
    sourceFiles = 100
    projects[1].sourceFiles = 20000
}

task withJUnit(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 100
    subProjectTemplates << 'with-junit'
}

task mediumWithJUnit(type: JvmProjectGeneratorTask) {
    projects = 25
    sourceFiles = 200
    subProjectTemplates << 'with-junit'
}

task largeWithJUnit(type: JvmProjectGeneratorTask) {
    projects = 50
    sourceFiles = 300
    subProjectTemplates << 'with-junit'
}

task withTestNG(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 100
    subProjectTemplates << 'with-testng'
}

task withVerboseTestNG(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 10
    subProjectTemplates << 'with-verbose-testng'
}

task withVerboseJUnit(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 10
    subProjectTemplates << 'with-verbose-junit'
}

task multiGroovy(type: JvmProjectGeneratorTask, description: 'Generates a multi-project Groovy build') {
    projects = 25
    groovyProject = true
}

task multiScala(type: JvmProjectGeneratorTask, description: 'Generates a multi-project Scala build') {
    projects = 25
    scalaProject = true
}

task multiGroovyScala(type: JvmProjectGeneratorTask, description: 'Generates a multi-project Groovy & Scala build') {
    projects = 25
    groovyProject = true
    scalaProject = true
}

task lotDependencies(type: JvmProjectGeneratorTask, description: 'Generates a small multi-project build with a large Dependency Graph') {
    projects = 5
    sourceFiles = 100
    templateArgs = [resolveDependenciesTask: true]

    dependencyGraph {
        size = 200
        depth = 4
        useSnapshotVersions = true //default is false
    }
}

task lotProjectDependencies(type: JvmProjectGeneratorTask, description: 'Generates a large multi-project build with a large Dependency Graph and plenty of project dependencies') {
    projects = 100
    sourceFiles = 1
    templateArgs = [resolveDependenciesTask: true, projectDependencies: true]

    dependencyGraph {
        size = 400
        depth = 6
    }
}

task manyProjects(type: JvmProjectGeneratorTask) {
    projects = 100
    sourceFiles = 0
}

task smallOldJava(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['java-source', 'old-java-plugin']
    testDependencies = files()
}

task mediumOldJava(type: JvmProjectGeneratorTask) {
    projects = 25
    subProjectTemplates = ['java-source', 'old-java-plugin']
    testDependencies = files()
}

task bigOldJava(type: JvmProjectGeneratorTask) {
    projects = 500
    subProjectTemplates = ['java-source', 'old-java-plugin']
    testDependencies = files()
}

task smallNewJava(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['java-source', 'new-java-plugin']
    testDependencies = files()
}

task mediumNewJava(type: JvmProjectGeneratorTask) {
    projects = 25
    subProjectTemplates = ['java-source', 'new-java-plugin']
    testDependencies = files()
}

task bigNewJava(type: JvmProjectGeneratorTask) {
    projects = 500
    subProjectTemplates = ['java-source', 'new-java-plugin']
    testDependencies = files()
}

task smallVariantsNewModel(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['variants-new-model']
    templateArgs = [
        flavourCount: 1,
        typeCount: 1
    ]
    testDependencies = files()
}

task mediumVariantsNewModel(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['variants-new-model']
    templateArgs = [
        flavourCount: 5,
        typeCount: 5
    ]
    testDependencies = files()
}

task bigVariantsNewModel(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['variants-new-model']
    templateArgs = [
        flavourCount: 23,
        typeCount: 23
    ]
    testDependencies = files()
}

task smallVariantsOldModel(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['variants-old-model']
    templateArgs = [
        flavourCount: 1,
        typeCount: 1
    ]
    testDependencies = files()
}

task mediumVariantsOldModel(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['variants-old-model']
    templateArgs = [
        flavourCount: 5,
        typeCount: 5
    ]
    testDependencies = files()
}

task bigVariantsOldModel(type: JvmProjectGeneratorTask) {
    projects = 1
    subProjectTemplates = ['variants-old-model']
    templateArgs = [
        flavourCount: 23,
        typeCount: 23
    ]
    testDependencies = files()
}

task variantsNewModelMultiproject(type: JvmProjectGeneratorTask) {
    projects = 10
    subProjectTemplates = ['variants-new-model']
    templateArgs = [
        flavourCount: 23,
        typeCount: 23
    ]
    testDependencies = files()
}

task variantsOldModelMultiproject(type: JvmProjectGeneratorTask) {
    projects = 10
    subProjectTemplates = ['variants-old-model']
    templateArgs = [
        flavourCount: 23,
        typeCount: 23
    ]
    testDependencies = files()
}

task bigEmpty(type: JvmProjectGeneratorTask) {
    projects = 10000
    subProjectTemplates = ['empty']
}

task smallNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 20
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task mediumNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 100
    templateArgs = [
        moduleCount: 1,
        functionCount: 20
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task bigNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 500
    templateArgs = [
        moduleCount: 1,
        functionCount: 50
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task multiNative(type: NativeProjectGeneratorTask) {
    projects = 10
    sourceFiles = 20
    templateArgs = [
        moduleCount: 10,
        functionCount: 20
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task manyProjectsNative(type: NativeProjectGeneratorTask) {
    projects = 100
    sourceFiles = 1
    templateArgs = [
        moduleCount: 3,
        functionCount: 1
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task native420Prj3Mod10Src10Func(type: NativeProjectGeneratorTask) {
    projects = 420
    sourceFiles = 10
    templateArgs = [
        moduleCount: 10,
        functionCount: 10
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task smallPCHNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 20
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-pch-source', 'native-pch-component']
}

task mediumPCHNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 200
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-pch-source', 'native-pch-component']
}

task bigPCHNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 1000
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-pch-source', 'native-pch-component']
}

task smallScenarioNative(type: NativeProjectGeneratorTask) {
    projects = 1
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-source', 'native-scenario']
}

task mediumScenarioNative(type: NativeProjectGeneratorTask) {
    projects = 25
    templateArgs = [
        moduleCount: 1,
        functionCount: 20
    ]
    subProjectTemplates = ['native-source', 'native-scenario']
}

task bigScenarioNative(type: NativeProjectGeneratorTask) {
    projects = 500
    templateArgs = [
        moduleCount: 1,
        functionCount: 50
    ]
    subProjectTemplates = ['native-source', 'native-scenario']
}

task bigOldJavaMoreSource(type: JvmProjectGeneratorTask) {
    projects = 500
    sourceFiles = 10
    linesOfCodePerSourceFile = 20
    subProjectTemplates = ['java-source', 'old-java-plugin']
    testDependencies = files()
}

task smallJavaSwModelProject(type: JvmProjectGeneratorTask) {
    projects = 10
    sourceFiles = 100
}

task largeJavaSwModelProject(type: JvmProjectGeneratorTask) {
    projects = 50
    sourceFiles = 1000
}

task smallJavaSwModelCompileAvoidanceWithApi(type: JvmProjectGeneratorTask) {
    projects = 10
    sourceFiles = 100
}

task largeJavaSwModelCompileAvoidanceWithApi(type: JvmProjectGeneratorTask) {
    projects = 50
    sourceFiles = 1000
}

task smallJavaSwModelCompileAvoidanceWithoutApi(type: JvmProjectGeneratorTask) {
    projects = 10
    sourceFiles = 100
}

task largeJavaSwModelCompileAvoidanceWithoutApi(type: JvmProjectGeneratorTask) {
    projects = 50
    sourceFiles = 1000
}

task tinyJavaSwApiJarStubbingWithoutApi(type: JvmProjectGeneratorTask) {
    projects = 3
    sourceFiles = 1000
}

task createSomeTasks(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 0
    subProjectTemplates = ['task-creation']
    templateArgs = [
        taskCount: 1000
    ]
    dependencyGraph {
        size = 0
    }

    numberOfExternalDependencies = 0
}

task createLotsOfTasks(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 0
    subProjectTemplates = ['task-creation']
    templateArgs = [
        taskCount: 15000
    ]
    dependencyGraph {
        size = 0
    }

    numberOfExternalDependencies = 0
}

configure([smallJavaSwModelProject, largeJavaSwModelProject,
           smallJavaSwModelCompileAvoidanceWithApi, largeJavaSwModelCompileAvoidanceWithApi,
           smallJavaSwModelCompileAvoidanceWithoutApi, largeJavaSwModelCompileAvoidanceWithoutApi,
           tinyJavaSwApiJarStubbingWithoutApi]) {
    linesOfCodePerSourceFile = 50
    filesPerPackage = 10
    subProjectTemplates = ['java-source', 'java-sw-model-project', 'with-junit']

    def dependencyGenerator = DependencyGenerator.newInstance(numberOfProjects: it.projectCount)
    boolean smallProjectType = (name.startsWith('small'))
    boolean tinyProjectType = (name.startsWith('tiny'))
    dependencyGenerator.numberOfDependencies = smallProjectType ? 3 : 10
    dependencyGenerator.numberOfLayers = tinyProjectType ? 1 : smallProjectType ? 3 : 5
    dependencyGenerator.layerRatio = smallProjectType ? 1 : 2

    templateArgs = [projectDependencies: true, generatedDependencies: dependencyGenerator.createDependencies(), testMethodCount: 1, useApiDependencies: false]
    if (tinyProjectType) {
        // make sure that subproject 2, that we use in a test, API depends on subproject 1
        // so that when we execute performance tests, source file updater can see subproject 1 as been a candidate for file changes
        templateArgs.generatedDependencies[2] = [1]
    }
    testDependencies = files()

    dependencyGraph {
        size = smallProjectType ? 20 : 200
        depth = 4
    }

    mavenJarCreator.with {
        minimumSizeKB = 200
        maximumSizeKB = 2048
    }

    numberOfExternalDependencies = smallProjectType ? 5 : 50
}

configure([smallJavaSwModelCompileAvoidanceWithApi,
           largeJavaSwModelCompileAvoidanceWithApi,
           smallJavaSwModelCompileAvoidanceWithoutApi,
           largeJavaSwModelCompileAvoidanceWithoutApi,
           tinyJavaSwApiJarStubbingWithoutApi]) {
    templateArgs.apiExports = [].withDefault { name.contains('Without') ? [] : ['org.gradle.test.performance'] }
    templateArgs.useApiDependencies = true
    numberOfExternalDependencies = 0
    createTestComponent = false
    dependencyGraph {
        size = 0
    }
    createPackageName = { testProject, fileNumber ->
        def pkg = 'org.gradle.test.performance'
        if (fileNumber % 2 == 0) {
            pkg = "${pkg}.internal"
        }
        pkg.toString()
    }
    createFileName = { testProject, prefix, fileNumber ->
        def suffix
        if (fileNumber % 2 == 0) {
            suffix = "${fileNumber}Internal"
        } else {
            suffix = "${fileNumber + 1}"
        }
        "${prefix}${testProject.subprojectNumber}_${suffix}".toString()
    }
    createExtendsAndImplementsClause = { testProject, prefix, fileNumber ->
        if (fileNumber > 0 && (fileNumber % 2 == 0)) {
            "extends org.gradle.test.performance.${prefix}${testProject.subprojectNumber}_${fileNumber}"
        } else {
            ''
        }
    }
    createExtraFields = { testProject, prefix, fileNumber ->
        if (fileNumber % 2 == 1) {
            templateArgs.generatedDependencies[testProject.subprojectNumber].collect {
                [modifier: 'public', name: "projectDep${it}", type: "${prefix}${it}_${fileNumber + 1}"]
            }
        } else {
            []
        }
    }
}

task nativeMonolithicOverlapping(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: true]
    projects = 100
    // number of source files to generate in each project of each type
    // this generates 200 C, 200 C++, 200 headers and 400 unused C/C++ files
    sourceFiles = 200
}

task nativeMonolithic(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: false]
    projects = 100
    sourceFiles = 200
}

task smallNativeMonolithic(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: false]
    projects = 2
    sourceFiles = 100
}

task mediumNativeMonolithic(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: false]
    projects = 10
    sourceFiles = 200
}

configure([nativeMonolithicOverlapping, nativeMonolithic, smallNativeMonolithic, mediumNativeMonolithic]) {
    templateArgs += [
        // number of functions created in each source file
        functionCount: 50,
        // number of prebuilt libraries to generate
        prebuiltLibraries: 30,
        // number of files included in each source set
        includedSourceCount: 50,
        // number of headers each source file includes
        includedHeaderCount: 10,
        // number of 'common' headers each source file includes
        includedCommonHeaderCount: 10,
    ]
    rootProjectTemplates = ['native-monolithic']
    subProjectTemplates = []
    additionalProjectFiles = ['common.gradle', 'prebuilt.gradle', 'components.gradle']
}

tasks.withType(JvmProjectGeneratorTask) {
    if (project.hasProperty("springDmPluginVersion")) {
        templateArgs['springDmPluginVersion'] = springDmPluginVersion
    }
}

task mediumAndroidBuild(type: RemoteProject) {
    remoteUri = 'https://github.com/gradle/perf-android-medium.git'
    branch = 'cc-gradle-profile'

    doLast {
        // WordPress specific setup
        file("$outputDirectory/WordPress/gradle.properties") << file("$outputDirectory/WordPress/gradle.properties-example").text
    }
}

task largeAndroidBuild(type: RemoteProject) {
    remoteUri = 'https://github.com/gradle/perf-android-large.git'
    branch = 'master'
}

// The Android Studio performance tests use custom model classes which need to be found in
// a dedicated project in order for the classpath to be setup properly
def androidRemoteProjects = tasks.withType(RemoteProject).matching { it.name =~ /Android/ }
androidRemoteProjects.all {
    dependsOn project(':internalAndroidPerformanceTesting').buildClassPath
    doLast {
        file("$outputDirectory/tapi-classpath.txt") << project(':internalAndroidPerformanceTesting').buildClassPath.outputFile.text
    }
}
