import org.gradle.api.plugins.quality.Checkstyle

plugins {
    id 'jvm-component'
    id 'java-lang'
}

<% if (repository) { %>
def repositoryUrl = rootProject.file("${repository.rootDir.name}").toURI().toURL()
<% } %>
repositories {
<% if (repository) { %>
    maven {
        url repositoryUrl
    }
<% } %>
    jcenter()
}

configurations {
    create('testRuntime').extendsFrom(create('testCompile').extendsFrom(create('compile')))
    create('checkstyle')
}

dependencies {
    <% if (dependencies) { dependencies.each { %>
    compile "${it.shortNotation()}"
    <% } } %>
    testCompile 'junit:junit:4.12'
    checkstyle "com.puppycrawl.tools:checkstyle:5.9"
}

model {
    components {
        main(JvmLibrarySpec)<% if (binding.hasVariable("generatedDependencies")) {
            def projectDependencies = generatedDependencies.get(subprojectNumber)
            if(projectDependencies) {
            %> {
            <% if(binding.hasVariable('useApiDependencies') && useApiDependencies) { %>
            api {
            <% } else { %>
            sources {
                java {
            <% } %>
                dependencies {
                    <%
                    projectDependencies.each {
%>                  project ':project${it}' library 'main'
                    <% } %>
                }
            <% if(binding.hasVariable('useApiDependencies') && useApiDependencies) { %>
            }
            <% } else { %>
               }
            }
            <% } %>
        }
<% } } %>
        <% if (binding.hasVariable("apiExports")) {
            def apiExports = apiExports.get(subprojectNumber)
            if(apiExports) {
            %>
        main {
            api {
                <%
                apiExports.each {
                    %>
                    exports '${it}'
                <% } %>
            }
        }
<% } } %>
        <% if (binding.hasVariable('testComponent') && testComponent) { %>
        test(JvmLibrarySpec) {
            sources {
                java {
                    dependencies {
                        library 'main'
                    }
                }
            }
        }
        <% } %>
    }
}

class ClasspathWiring extends RuleSource {
    static final def taskToConfigurationNameMapping = [compileMainJarMainJava: 'compile', compileTestJarTestJava: 'testCompile']

    @Mutate
    void wire(ModelMap<Task> tasks) {
        tasks.withType(JavaCompile) { javaCompileTask ->
            def configurationName = taskToConfigurationNameMapping.get(javaCompileTask.name)
            if (configurationName) {
                def configuration = javaCompileTask.project.configurations.getByName(configurationName)
                javaCompileTask.classpath += configuration
            }
        }
    }
}

<% if (binding.hasVariable('testComponent') && testComponent) { %>
class TestTaskWiring extends RuleSource {
    @Mutate
    void createTestTask(ModelMap<Task> tasks, @Path("binaries") ModelMap<BinarySpec> binaries, @Path("components") ModelMap<JvmLibrarySpec> libraries) {
        def testJarClassesDir = binaries.get('testJar').classesDir
        def additionalClassPath = [binaries.get('mainJar').classesDir, testJarClassesDir]
        tasks.create("test", Test) {
            def project = project
            dependsOn "compileTestJarTestJava"
            classpath = project.files(additionalClassPath) + project.configurations.getByName('testRuntime')
            testClassesDir = testJarClassesDir
            description = "Runs the unit tests."
            binResultsDir = new File(getTestResultsDir(project), String.format("binary/%s", name))
            workingDir = project.projectDir
            reports.html.destination = getTestReportDir(project)
            reports.junitXml.destination = getTestResultsDir(project)
        }
        tasks.get("check").dependsOn "test"
    }

    static final String testResultsDirName = 'test-results'
    static final String testReportDirName = 'tests'
    private File getTestResultsDir(Project project) {
        new File(project.buildDir, testResultsDirName)
    }
    private File getTestReportDir(Project project) {
        new File(new File(project.buildDir, 'reports'), testReportDirName)
    }
}
<% } %>

class CheckstyleWiring extends RuleSource {
    @Mutate
    void createCheckstyleTasks(ModelMap<Task> tasks, ModelMap<JvmLibrarySpec> libraries) {
        def checkstyleTaskNames = libraries.collect { JvmLibrarySpec librarySpec ->
            String taskName = "checkstyle\${librarySpec.getName().capitalize()}"
            tasks.create(taskName, Checkstyle) { task ->
                def project = project
                source = librarySpec.sources.collect {
                    it.source.srcDirs
                }.flatten()
                checkstyleClasspath = project.configurations['checkstyle']
                classpath = project.files(librarySpec.binaries.values().classesDir) + project.configurations[librarySpec == 'test' ? 'testCompile' : 'compile']
                configFile = new File(project.rootDir, "checkstyle.xml")
                configProperties = [:]
                ignoreFailures = true
                reports.xml.with {
                    enabled = true
                    destination = new File(new File(project.buildDir, "reports"), "\${task.name}.xml")
                }
                dependsOn librarySpec.binaries.values().tasks.name.flatten()
            }
            taskName
        }
        tasks.check.dependsOn checkstyleTaskNames
    }
}

apply plugin: ClasspathWiring
apply plugin: CheckstyleWiring
<% if (binding.hasVariable('testComponent') && testComponent) { %>
apply plugin: TestTaskWiring
<% } %>
